{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/Rawrk-Luxury/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/Rawrk-Luxury/src/ai/flows/suggest-customizations.ts"],"sourcesContent":["// This is an autogenerated file from Firebase Studio.\n\n'use server';\n\n/**\n * @fileOverview Provides AI-powered customization suggestions for a given vehicle model.\n *\n * - suggestCustomizations - A function that suggests vehicle customizations based on user input.\n * - SuggestCustomizationsInput - The input type for the suggestCustomizations function.\n * - SuggestCustomizationsOutput - The return type for the suggestCustomizations function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SuggestCustomizationsInputSchema = z.object({\n  vehicleModel: z.string().describe('The model of the vehicle to customize.'),\n  userPreferences: z\n    .string()\n    .describe(\n      'A description of the users preferences. Consider their personality and style.'\n    ),\n});\nexport type SuggestCustomizationsInput = z.infer<typeof SuggestCustomizationsInputSchema>;\n\nconst SuggestCustomizationsOutputSchema = z.object({\n  suggestedInteriorStyle: z\n    .string()\n    .describe('A suggested interior style for the vehicle.'),\n  suggestedComfortOptions: z\n    .array(z.string())\n    .describe('A list of suggested comfort options for the vehicle.'),\n  reasoning: z.string().describe(\"The AI's reasoning for these suggestions.\"),\n});\nexport type SuggestCustomizationsOutput = z.infer<typeof SuggestCustomizationsOutputSchema>;\n\nexport async function suggestCustomizations(\n  input: SuggestCustomizationsInput\n): Promise<SuggestCustomizationsOutput> {\n  return suggestCustomizationsFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'suggestCustomizationsPrompt',\n  input: {schema: SuggestCustomizationsInputSchema},\n  output: {schema: SuggestCustomizationsOutputSchema},\n  prompt: `You are an expert vehicle customization consultant. A user has selected the {{{vehicleModel}}} and has the following preferences: {{{userPreferences}}}. The color is fixed and cannot be changed.\n\n  Based on this information, suggest an interior style, and a list of comfort options that would be a good fit for the user.\n\n  Explain your reasoning for each suggestion.\n\n  Output the suggestions in JSON format.`,\n});\n\nconst suggestCustomizationsFlow = ai.defineFlow(\n  {\n    name: 'suggestCustomizationsFlow',\n    inputSchema: SuggestCustomizationsInputSchema,\n    outputSchema: SuggestCustomizationsOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,sDAAsD;;;;;;AAItD;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,iBAAiB,uIAAA,CAAA,IAAC,CACf,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,wBAAwB,uIAAA,CAAA,IAAC,CACtB,MAAM,GACN,QAAQ,CAAC;IACZ,yBAAyB,uIAAA,CAAA,IAAC,CACvB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGO,eAAe,sBACpB,KAAiC;IAEjC,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;wCAM6B,CAAC;AACzC;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA5BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///home/user/Rawrk-Luxury/src/app/actions.ts"],"sourcesContent":["\n\"use server\";\n\nimport { suggestCustomizations, type SuggestCustomizationsInput, type SuggestCustomizationsOutput } from '@/ai/flows/suggest-customizations';\n\nexport async function getAiSuggestions(\n  vehicleModel: string,\n  userPreferences: string\n): Promise<SuggestCustomizationsOutput> {\n  try {\n    const input: SuggestCustomizationsInput = {\n      vehicleModel,\n      userPreferences,\n    };\n    const suggestions = await suggestCustomizations(input);\n    return suggestions;\n  } catch (error) {\n    console.error(\"Error getting AI suggestions:\", error);\n    // In a real app, you might want to log this to a monitoring service\n    throw new Error(\"Failed to get suggestions from AI. Please try again later.\");\n  }\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;AAEO,eAAe,iBACpB,YAAoB,EACpB,eAAuB;IAEvB,IAAI;QACF,MAAM,QAAoC;YACxC;YACA;QACF;QACA,MAAM,cAAc,MAAM,CAAA,GAAA,+IAAA,CAAA,wBAAqB,AAAD,EAAE;QAChD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,oEAAoE;QACpE,MAAM,IAAI,MAAM;IAClB;AACF;;;IAhBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file:///home/user/Rawrk-Luxury/.next-internal/server/app/configurator/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getAiSuggestions as '60a2d755d50bcc442699f84177f46f0420fe5303db'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":["file:///home/user/Rawrk-Luxury/src/components/configurator.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Configurator = registerClientReference(\n    function() { throw new Error(\"Attempted to call Configurator() from the server but Configurator is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/configurator.tsx <module evaluation>\",\n    \"Configurator\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,iEACA","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["file:///home/user/Rawrk-Luxury/src/components/configurator.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Configurator = registerClientReference(\n    function() { throw new Error(\"Attempted to call Configurator() from the server but Configurator is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/configurator.tsx\",\n    \"Configurator\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,eAAe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC9C;IAAa,MAAM,IAAI,MAAM;AAAwO,GACrQ,6CACA","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":["file:///home/user/Rawrk-Luxury/src/app/configurator/page.tsx"],"sourcesContent":["import { Configurator } from \"@/components/configurator\";\n\nexport default function ConfiguratorPage({\n  searchParams,\n}: {\n  searchParams?: {\n    model?: string;\n  };\n}) {\n  return <Configurator selectedModelId={searchParams?.model} />;\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS,iBAAiB,EACvC,YAAY,EAKb;IACC,qBAAO,8OAAC,kIAAA,CAAA,eAAY;QAAC,iBAAiB,cAAc;;;;;;AACtD","debugId":null}}]
}